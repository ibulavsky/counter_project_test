{"version":3,"sources":["assets/SettingsUI.png","Header.jsx","Button.jsx","SettingMode/Settings.jsx","Footer.jsx","CountMode/DisplayCounter.jsx","CountMode/Counter.jsx","Redux/Reducer.js","App.jsx","serviceWorker.js","Redux/store.js","index.js"],"names":["module","exports","Header","className","Button","props","classButton","disabled","title","name","onClick","Settings","state","minValue","maxValue","errorMax","errorMin","onChangeMax","e","currentTarget","value","setState","onChangeMin","onApplySetting","applySetting","render","classForInputMax","classForInputMin","type","onChange","React","Component","Footer","src","settingsImg","width","alt","DisplayCounter","currentValue","Counter","counter","stopCounter","incrementNumber","defaultNumber","initialState","reducer","action","App","step","settingModeOn","settingMode","applySettings","restoreState","saveState","connect","dispatch","incrementNumberAC","defaultNumberAC","applySettingsAC","Boolean","window","location","hostname","match","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0c4face.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SettingsUI.a188b984.png\";","import React from 'react';\r\nimport './App.css';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <div className=\"title\">\r\n            <h3>Counter</h3>\r\n        </div>\r\n    );\r\n    };\r\n\r\nexport default Header;\r\n\r\n","import React from 'react';\nimport './App.css';\n\nconst Button = (props) => {\n    const onClick = () => props.onClick();\n    let classButton = \"button\";\n\n    // eslint-disable-next-line no-lone-blocks\n    {\n        props.disabled\n            ? classButton = \"disabled\"\n            : classButton = \"button\"\n    }\n\n    return (\n        <button className={classButton}\n                title={props.name}\n                disabled={props.disabled}\n                onClick={onClick}>\n            {props.name}\n        </button>\n    );\n};\n\nexport default Button;\n\n","import React from 'react';\nimport '../App.css';\nimport Button from \"../Button\";\n\nclass Settings extends React.Component {\n\n    state = {\n        minValue: this.props.minValue,\n        maxValue: this.props.maxValue,\n        errorMax: false,\n        errorMin: false,\n    };\n\n    onChangeMax = (e) => {\n\n        if (+e.currentTarget.value < 1) {\n            this.setState(\n                {\n                    errorMax: true,\n                }\n            )\n        } else if (+e.currentTarget.value <= +this.state.minValue) {\n            this.setState(\n                {\n                    errorMax: true,\n                }\n            )\n        } else {\n            this.setState(\n                {\n                    errorMax: false,\n                    maxValue: +e.currentTarget.value\n                }\n            )\n        }\n    };\n\n    onChangeMin = (e) => {\n        if (+e.currentTarget.value >= +this.state.maxValue) {\n            this.setState(\n                {\n                    errorMin: true,\n                }\n            )\n        } else if (+e.currentTarget.value < 0) {\n            this.setState(\n                {\n                    minValue: 0,\n                    errorMin: true\n                }\n            )\n        } else {\n            this.setState(\n                {\n                    errorMin: false,\n                    minValue: +e.currentTarget.value\n                }\n            )\n        }\n    };\n\n    onApplySetting = () => {\n        let maxValue = this.state.maxValue;\n        let minValue = this.state.minValue;\n        this.setState(\n            {\n                errorMin: false,\n                errorMax: false\n            }\n        );\n        this.props.applySetting(minValue, maxValue)\n    };\n\n    render = () => {\n\n        let classForInputMax = this.state.errorMax ? 'input error' : 'input';\n        let classForInputMin = this.state.errorMin ? 'input error' : 'input';\n\n        return (\n            <div className=\"content\">\n                <div className='listWrapper'>\n                    <div>MAX VALUE</div>\n                    <div>MIN VALUE</div>\n                </div>\n                <span>\n                    <input className={classForInputMax}\n                           type='number'\n                           value={this.state.maxValue}\n                           onChange={this.onChangeMax}\n                    />\n                    <input className={classForInputMin}\n                           type='number'\n                           value={this.state.minValue}\n                           onChange={this.onChangeMin}\n                    />\n                </span>\n                <Button name='apply'\n                        onClick={this.onApplySetting}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Settings;\n\n","import React from 'react';\r\nimport './App.css';\r\nimport settingsImg from './assets/SettingsUI.png'\r\n\r\nconst Footer = (props) => {\r\n\r\n    return (\r\n        <div className=\"footer\">\r\n            <span>To change mode Press</span>\r\n            <span>\r\n                <input className=\"inputFooter\"\r\n                       type='image'\r\n                       src={settingsImg}\r\n                       width=\"50\"\r\n                       onClick={() => props.onClick()}\r\n                 alt='settings'/>\r\n           </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n\r\n","import React from 'react';\nimport '../App.css';\n\nconst DisplayCounter = (props) => {\n\n    return (\n        <div className='display'>\n            {props.currentValue < props.maxValue\n                ? <span> {props.currentValue} </span>\n                : <span className='max'> {props.maxValue} </span>\n            }\n        </div>\n    )\n};\n\nexport default DisplayCounter;","import React from 'react';\nimport '../App.css';\nimport DisplayCounter from \"./DisplayCounter\";\nimport Button from \"../Button\";\n\nconst Counter = (props) => {\n\n    return (\n        <div className=\"content\">\n            <DisplayCounter currentValue={props.counter.currentValue}\n                            minValue={props.counter.minValue}\n                            maxValue={props.counter.maxValue}/>\n            <div>\n                <Button name='+' disabled={props.stopCounter} onClick={props.incrementNumber}/>\n                <Button name='default' onClick={props.defaultNumber}/>\n            </div>\n        </div>\n    )\n};\n\nexport default Counter;\n","const APPLY_SETTINGS = \"Counter/APPLY-SETTINGS\";\r\nconst INCREMENT_NUMBER = \"Counter/INCREMENT-NUMBER\";\r\nconst DEFAULT_NUMBER = \"Counter/DEFAULT-NUMBER\";\r\n\r\nlet initialState = {\r\n    counter: {\r\n        currentValue: 0,\r\n        maxValue: 5,\r\n        minValue: 0,\r\n    }\r\n};\r\n\r\nlet reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case APPLY_SETTINGS :\r\n            return {\r\n                ...state,\r\n                counter: {\r\n                    ...state.counter,\r\n                    maxValue: action.maxValue,\r\n                    minValue: action.minValue,\r\n                    currentValue: action.minValue,\r\n                }\r\n            };\r\n        case INCREMENT_NUMBER :\r\n            return {\r\n                ...state, counter: {\r\n                    ...state.counter, currentValue: action.currentValue\r\n                }\r\n            };\r\n        case DEFAULT_NUMBER :\r\n            return {\r\n                ...state, counter: {...state.counter, currentValue: action.minValue}\r\n            };\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n};\r\n\r\nexport const applySettingsAC = (minValue, maxValue,) => {\r\n    return {\r\n        type: APPLY_SETTINGS, minValue, maxValue\r\n    }\r\n};\r\n\r\nexport const incrementNumberAC = (currentValue) => {\r\n    return {\r\n        type: INCREMENT_NUMBER, currentValue,\r\n    }\r\n};\r\n\r\nexport const defaultNumberAC = (minValue) => {\r\n    return {\r\n        type: DEFAULT_NUMBER, minValue\r\n    }\r\n};\r\n\r\nexport default reducer;","import React from 'react';\nimport './App.css';\nimport Header from \"./Header\";\nimport Settings from \"./SettingMode/Settings\";\nimport Footer from \"./Footer\";\nimport Counter from \"./CountMode/Counter\";\nimport {applySettingsAC, defaultNumberAC, incrementNumberAC} from \"./Redux/Reducer\";\nimport {connect} from \"react-redux\";\n\nclass App extends React.Component {\n\n    incrementNumber = () => {\n        let currentValue = +this.props.counter.currentValue + this.state.step;\n        if (currentValue >= this.props.counter.maxValue) {\n            this.props.incrementNumber(currentValue);\n            this.setState(\n                {\n                    stopCounter: true\n                })\n        } else {\n            this.props.incrementNumber(currentValue);\n        }\n    };\n\n    defaultNumber = () => {\n        this.props.defaultNumber(this.props.counter.minValue);\n        this.setState({\n            stopCounter: false\n        })\n    };\n\n    settingModeOn = () => {\n        this.setState({\n            settingMode: !this.state.settingMode\n        })\n    };\n\n    applySetting = (minValue, maxValue,) => {\n        this.props.applySettings(minValue, maxValue);\n        this.setState(\n            {\n                stopCounter: false\n            }\n        )\n    };\n\n    state = {\n        stopCounter: false,\n        settingMode: false,\n        step: 1,\n    };\n    restoreState = () => {\n\n    };\n\n    saveState = () => {\n\n    };\n\n    render = () => {\n        return (\n            <div className=\"App\">\n                <Header/>\n                {this.state.settingMode\n                    ? <Settings maxValue={this.props.counter.maxValue}\n                                minValue={this.props.counter.minValue}\n                                applySetting={this.applySetting}\n                    />\n                    : <Counter counter={this.props.counter}\n                               state={this.state}\n                               incrementNumber={this.incrementNumber}\n                               defaultNumber={this.defaultNumber}/>\n                }\n                <Footer onClick={this.settingModeOn}/>\n            </div>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        counter: state.counter,\n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        incrementNumber(currentValue) {\n            dispatch(incrementNumberAC(currentValue))\n        },\n        defaultNumber(minValue) {\n            dispatch(defaultNumberAC(minValue))\n        },\n        applySettings(minValue, maxValue) {\n            dispatch(applySettingsAC(minValue, maxValue))\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport reducer from \"./Reducer\";\r\n\r\nlet store = createStore(reducer);\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}